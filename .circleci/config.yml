version: 2.1

parameters:
  flutter-version:
    type: string
    default: "2.8.1"
  maven-version:
    type: string
    default: "3.8.4"
  flutter-run-args:
    description: Common arguments for flutter commands that execute code (run, build, test, drive)
    type: string
    # see https://yaml-multiline.info/ for multi-line strings in yaml
    # (note that circleci seems to ignore `>` and `>-` for `run:` and `command:` items)
    default: >-
      --web-renderer html
      --dart-define=CI_PROVIDER=CircleCI
      --dart-define=GIT_URL=<< pipeline.project.git_url >>
      --dart-define=GIT_BRANCH=<< pipeline.git.branch >>
      --dart-define=COMMIT_HASH=<< pipeline.git.revision >>
  flutter-backend-url:
    description: Common arguments for flutter commands that execute code (run, build, test, drive)
    type: string
    # the name of the backend url env variable depends on the git branch name, which may contain slashes
    # therefore, apply the dark arts (nested command substitution) to replace special characters by "_" in git branch names
    default: >-
      --dart-define=BACKEND_URL="$(VAR_NAME="$(echo "BACKEND_URL_<< pipeline.git.branch >>" | sed 's/[^A-Za-z0-9]/_/g')" ; echo ${!VAR_NAME:-$BACKEND_URL_development})"
      --dart-define=AUTH_TOKEN=Auth-Token
      --dart-define=AUTH_TOKEN_LENGTH=36

orbs:
  flutter: circleci/flutter@1.0.1
  browser-tools: circleci/browser-tools@1.2.3
  codecov: codecov/codecov@3.2.2 # requires env var CODECOV_TOKEN

executors:
  cirrusci-flutter:
    docker:
      # has flutter preinstalled, but otherwise very minimalistic (see https://hub.docker.com/r/cirrusci/flutter/)
      - image: cirrusci/flutter:<< pipeline.parameters.flutter-version >>
  circleci-android-with-browsers:
    docker:
      - image: cimg/android:2021.10.2-browsers # has browsers (including chromedriver) preinstalled

jobs:
  build-and-deploy:
    executor: cirrusci-flutter
    steps:
      - checkout
      #- flutter/install_sdk:
      #    version: << pipeline.parameters.flutter-version >>
      - flutter/install_pub
      - run:
          name: Build web
          command: flutter build web << pipeline.parameters.flutter-run-args >> << pipeline.parameters.flutter-backend-url >>
      - run:
          name: Compress Artifacts
          command: zip -r ../web.zip .
          working_directory: build/web
      - store_artifacts:
          path: build/web.zip

      - run:
          name: Deploy to GitHub Pages
          command: bash -x .circleci/deploy-gh-pages.sh

  run-widget-tests:
    executor: cirrusci-flutter
    steps:
      - checkout
      - flutter/install_pub
      - run:
          name: Create reports directory
          command: mkdir reports
      - run:
          name: Set up dummy coverage test
          # so that files not touched in the actual tests are not left out of the report
          # see https://github.com/flutter/flutter/issues/27997
          command: sh -x .circleci/generate_coverage_helper.sh
      - run:
          name: Generate Mocks (for mockito)
          command: flutter pub run build_runner build --delete-conflicting-outputs
      - run:
          name: Run Widget tests
          # creates test report (reports/tests.jsonl) and coverage report (coverage/lcov.info)
          command: |
            flutter test --platform tester --coverage --reporter json << pipeline.parameters.flutter-run-args >> \
              > reports/tests.jsonl

      #################### TEST RESULTS #######################
      - store_artifacts:
          # regarding format, see https://github.com/dart-lang/test/blob/master/pkgs/test/doc/json_reporter.md
          path: reports/tests.jsonl
      - run:
          name: Generate JUnit XML report
          # see https://pub.dev/packages/junitreport
          command: flutter pub run junitreport:tojunit -i reports/tests.jsonl -o reports/tests.xml
      - store_test_results:
          path: reports/tests.xml
      - store_artifacts:
          path: reports/tests.xml

      #################### COVERAGE #######################
      - store_artifacts:
          path: coverage/lcov.info
      - run:
          name: Set up GPG agent (for codecov signature verification)
          command: sudo apt-get -y update && sudo apt-get -y install gpg-agent
      - codecov/upload:
          file: coverage/lcov.info

  run-integration-tests:
    docker:
      # first `image` defines the primary container where all steps will run
      # if no `name:` is provided, services are accessible through `localhost`
      - image: cirrusci/flutter:<< pipeline.parameters.flutter-version >>
      - image: postgres
        environment:
          POSTGRES_PASSWORD: mysecretpassword
    steps:
      - run:
          name: Set up Java 17
          command: sudo apt-get -y update && sudo apt-get -y install openjdk-17-jdk-headless
      - run:
          name: Set up maven
          command: |
            curl https://dlcdn.apache.org/maven/maven-3/$MVN_VERSION/binaries/apache-maven-$MVN_VERSION-bin.tar.gz \
              | tar xzvf - -C /opt
          environment:
            - MVN_VERSION: << pipeline.parameters.maven-version >>
      - run:
          name: Clone backend
          # to allow injecting the backend branch based on the frontend branch, replace special characters in branch names by underscores
          command: |
            BACKEND_BRANCH_NORMALIZED=$(echo "BACKEND_BRANCH_$CIRCLE_BRANCH" | sed -e 's/[^A-Za-z0-9]/_/g')
            git clone -b ${!BACKEND_BRANCH_NORMALIZED:-development} ${BACKEND_GIT_URL:-https://github.com/AAU-ASE-GroupC-WS2021/canteenMgmtBackend.git} /opt/backend
            echo "Checked out branch: $(cd /opt/backend && git rev-parse --abbrev-ref HEAD)"
      - run:
          name: Run backend
          # $JAVA_HOME is not set in this container by default (for command see https://www.xmodulo.com/set-java_home-environment-variable-linux.html)
          # env vars are not persisted across steps, hence path to maven is required
          # `--batch-mode` is recommended for CI setups
          command: |
            export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))
            /opt/apache-maven-*/bin/mvn --batch-mode --no-transfer-progress spring-boot:run
          working_directory: /opt/backend
          background: true

      - checkout
      - browser-tools/install-browser-tools:
          install-firefox: false # if firefox is needed, install jq first: `sudo apt-get -y update && sudo apt-get -y install jq`
          install-geckodriver: false
      - flutter/install_pub
      - run:
          name: Start chromedriver
          command: chromedriver --port=4444 # default port used by `flutter drive`
          background: true
      - run:
          name: Run Integration tests
          # `flutter drive` does not support machine-readable reports
          # regarding coverage see also https://stackoverflow.com/questions/57933204/flutter-driver-test-coverage-report
          command: |
            flutter drive --driver=test_driver/integration_test.dart --target=integration_test/about_button_test.dart \
              -d web-server << pipeline.parameters.flutter-run-args >>

  analyze:
    executor: cirrusci-flutter
    steps:
      - checkout
      - flutter/install_pub
      - run:
          name: Create reports directory
          command: mkdir reports
      - run:
          name: Generate Mocks (for mockito)
          # required as analyzer will complain about missing imports
          # generated files will generally include `ignore` directives for relevant rules
          command: flutter pub run build_runner build --delete-conflicting-outputs
      - run:
          name: Run static analysis
          # for now, do not treat infos and warnings as job failure
          # note: analyze does not need (or accept) the compile-time args
          command: flutter analyze --write=reports/static_analysis.txt --no-fatal-infos --no-fatal-warnings
      - store_artifacts:
          path: reports/static_analysis.txt
      # TODO run dart_code_metrics

workflows:
  test-and-build:
    jobs:
      - run-widget-tests
      - run-integration-tests
      - analyze
      - build-and-deploy:
          context: GH-Pages-<< pipeline.git.branch >>
          filters:
            branches:
              only:
                - main
                - development
          requires:
            - run-widget-tests
            - run-integration-tests
            - analyze
